


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             lib, CODE, READWRITE
    2 00000000                 EXPORT           pin_connect_block_setup
    3 00000000                 EXPORT           uart_init
    4 00000000                 EXPORT           read_character
    5 00000000                 EXPORT           output_character
    6 00000000                 EXPORT           read_string
    7 00000000                 EXPORT           output_string
    8 00000000                 EXPORT           reverse_four_bits
    9 00000000                 EXPORT           gpio_direction_register
   10 00000000                 EXPORT           illuminateLEDs
   11 00000000                 EXPORT           read_from_push_btns
   12 00000000                 EXPORT           display_digit_on_7_seg
   13 00000000                 EXPORT           Illuminate_RGB_LED
   14 00000000                 EXPORT           string_conversion
   15 00000000                 EXPORT           div_and_mod
   16 00000000                 EXPORT           interrupt_init
   17 00000000                 EXPORT           timers_start
   18 00000000                 EXPORT           timers_restart
   19 00000000                 EXPORT           timers_stop
   20 00000000                 EXPORT           timers_pause
   21 00000000                 EXPORT           binary_conversion_time
   22 00000000                 EXPORT           binary_conversion_score
   23 00000000                 EXPORT           watchdog_init
   24 00000000                 EXPORT           watchdog_start
   25 00000000                 EXPORT           timer1_start
   26 00000000                 EXPORT           timer1_stop
   27 00000000                 EXPORT           timer0_speedup
   28 00000000         
   29 00000000                 ALIGN
   30 00000000         
   31 00000000 00000014 
                       U0LSR   EQU              0x14        ; UART0 Line Status
                                                             Register
   32 00000000         
   33 00000000                 ALIGN
   34 00000000         
   35 00000000         digits_SET
   36 00000000 00001F80        DCD              0x00001F80  ; 0
   37 00000004 00000300        DCD              0x00000300  ; 1
   38 00000008 00002D80        DCD              0x00002D80  ; 2
   39 0000000C 00002780        DCD              0x00002780  ; 3
   40 00000010 00003300        DCD              0x00003300  ; 4
   41 00000014 00003680        DCD              0x00003680  ; 5
   42 00000018 00003E80        DCD              0x00003E80  ; 6
   43 0000001C 00000380        DCD              0x00000380  ; 7
   44 00000020 00003F80        DCD              0x00003F80  ; 8
   45 00000024 00003380        DCD              0x00003380  ; 9
   46 00000028 00003B80        DCD              0x00003B80  ; A
   47 0000002C 00003E00        DCD              0x00003E00  ; b
   48 00000030 00001C80        DCD              0x00001C80  ; C
   49 00000034 00002F00        DCD              0x00002F00  ; d
   50 00000038 00003C80        DCD              0x00003C80  ; E
   51 0000003C 00003880        DCD              0x00003880  ; F
   52 00000040 00002000        DCD              0x00002000  ; INIT
   53 00000044         
   54 00000044                 ALIGN
   55 00000044         
   56 00000044         colors_SET
   57 00000044 00000000        DCD              0x00000000  ;OFF(0)



ARM Macro Assembler    Page 2 


   58 00000048 00020000        DCD              0x00020000  ;RED1(1)
   59 0000004C 00040000        DCD              0x00040000  ;BLUE(2)
   60 00000050 00200000        DCD              0x00200000  ;GREEN(3)
   61 00000054 00060000        DCD              0x00060000  ;PURPLE(4)
   62 00000058 00220000        DCD              0x00220000  ;YELLOW(5)
   63 0000005C 00260000        DCD              0x00260000  ;WHITE(6)
   64 00000060         
   65 00000060                 ALIGN
   66 00000060         
   67 00000060         
   68 00000060         pin_connect_block_setup
   69 00000060 E92D4003        STMFD            sp!, {r0, r1, lr}
   70 00000064 E59F0718        LDR              r0, =0xE002C000 ; PINSEL0(only 
                                                            UART0 and p0.7-p0.1
                                                            3)
   71 00000068 E5901000        LDR              r1, [r0]
   72 0000006C E3811005        ORR              r1, r1, #5
   73 00000070 E2011005        BIC              r1, r1, #0xFFFFFFFA ;clear all 
                                                            except value 5 bits
                                                            
   74 00000074 E5801000        STR              r1, [r0]
   75 00000078 E8BD4003        LDMFD            sp!, {r0, r1, lr}
   76 0000007C E12FFF1E        BX               lr
   77 00000080         
   78 00000080         gpio_direction_register
   79 00000080 E92D4007        STMFD            sp!, {r0-r2, lr}
   80 00000084 E59F06FC        LDR              r0, =0xE0028008 ;IO0DIR base ad
                                                            dress
   81 00000088 E5901000        LDR              r1, [r0]
   82 0000008C E59F26F8        LDR              r2, =0x00263F80 ;set registers
   83 00000090 E1811002        ORR              r1, r1, r2
   84 00000094 E59F26F4        LDR              r2, =0xFFD9C07F
   85 00000098 E1C11002        BIC              r1, r1, r2  ;clear all but set 
                                                            register
   86 0000009C E5801000        STR              r1, [r0]
   87 000000A0 E59F06EC        LDR              r0, =0xE0028018 ;IO1DIR base ad
                                                            dress
   88 000000A4 E5901000        LDR              r1, [r0]
   89 000000A8 E381180F        ORR              r1, r1, #0x000F0000 
                                                            ;set register
   90 000000AC E201180F        BIC              r1, r1, #0xFFF0FFFF ;clear all 
                                                            but set register
   91 000000B0 E5801000        STR              r1, [r0]
   92 000000B4 E8BD4007        LDMFD            sp!, {r0-r2, lr}
   93 000000B8 E12FFF1E        BX               lr
   94 000000BC         
   95 000000BC         uart_init
   96 000000BC         
   97 000000BC E59F26D4        LDR              r2, =0xE000C000 ; Load Address 
                                                            into r2
   98 000000C0 E3A01083        MOV              r1, #131    ; Copy 131 to r1
   99 000000C4 E5C2100C        STRB             r1, [r2, #0xC] ; Load byte from
                                                             r2 and offseting b
                                                            y C
  100 000000C8 E3A01001        MOV              r1, #1      ; Copy 120 to r1
  101 000000CC E5C21000        STRB             r1, [r2]    ; Load byte from r2
                                                             no offsets
  102 000000D0 E3A01000        MOV              r1, #0      ; Copy 0 to r1
  103 000000D4 E5C21004        STRB             r1, [r2, #4] ; Load byte from r



ARM Macro Assembler    Page 3 


                                                            2 and offseting by 
                                                            4
  104 000000D8 E3A01003        MOV              r1, #3      ; Copy 3 to r1
  105 000000DC E5C2100C        STRB             r1, [r2, #0xC] ; Load byte from
                                                             r2 and offseting b
                                                            y C 
  106 000000E0 E12FFF1E        BX               lr          ;exit
  107 000000E4         
  108 000000E4         watchdog_init
  109 000000E4 E92D4007        STMFD            sp!, {r0-r2, lr}
  110 000000E8         
  111 000000E8 E3A0220E        LDR              r2, =0xE0000000
  112 000000EC E3A00003        MOV              r0, #3
  113 000000F0 E5820000        STR              r0, [r2]
  114 000000F4 E3A0224E        LDR              r2, =0xE0000004
  115 000000F8 E3A000FF        LDR              r0, =0xFF
  116 000000FC E5820000        STR              r0, [r2]
  117 00000100         
  118 00000100 E8BD4007        LDMFD            sp!, {r0-r2, lr}
  119 00000104 E12FFF1E        BX               lr
  120 00000108         
  121 00000108         watchdog_start
  122 00000108 E92D4007        STMFD            sp!, {r0-r2, lr}
  123 0000010C         
  124 0000010C E3A0228E        LDR              r2, =0xE0000008
  125 00000110 E3A000AA        LDR              r0, =0xAA
  126 00000114 E5820000        STR              r0, [r2]
  127 00000118 E3A00055        LDR              r0, =0x55
  128 0000011C E5820000        STR              r0, [r2]
  129 00000120         
  130 00000120 E8BD4007        LDMFD            sp!, {r0-r2, lr}
  131 00000124 E12FFF1E        BX               lr
  132 00000128         
  133 00000128         interrupt_init
  134 00000128 E92D4003        STMFD            SP!, {r0-r1, lr} 
                                                            ; Save registers 
  135 0000012C         
  136 0000012C         ; Push button setup   
  137 0000012C E59F0650        LDR              r0, =0xE002C000
  138 00000130 E5901000        LDR              r1, [r0]
  139 00000134 E3811202        ORR              r1, r1, #0x20000000
  140 00000138 E3C11201        BIC              r1, r1, #0x10000000
  141 0000013C E5801000        STR              r1, [r0]    ; PINSEL0 bits 29:2
                                                            8 = 10
  142 00000140         
  143 00000140         ; Classify sources as IRQ or FIQ
  144 00000140 E59F0654        LDR              r0, =0xFFFFF000
  145 00000144 E590100C        LDR              r1, [r0, #0xC]
  146 00000148 E3811902        ORR              r1, r1, #0x8000 ; External Inte
                                                            rrupt 1
  147 0000014C E3811040        ORR              r1, r1, #0x40 ; UART0
  148 00000150 E3811010        ORR              r1, r1, #0x10 ; Timer0
  149 00000154 E3811020        ORR              r1, r1, #0x20 ; Timer1
  150 00000158 E580100C        STR              r1, [r0, #0xC]
  151 0000015C         
  152 0000015C         ; Enable Interrupts Sources
  153 0000015C E59F0638        LDR              r0, =0xFFFFF000
  154 00000160 E5901010        LDR              r1, [r0, #0x10]
  155 00000164 E3811902        ORR              r1, r1, #0x8000 ; External Inte



ARM Macro Assembler    Page 4 


                                                            rrupt 1
  156 00000168 E3811040        ORR              r1, r1, #0x40 ; UART0
  157 0000016C E3811010        ORR              r1, r1, #0x10 ; Timer0
  158 00000170 E3811020        ORR              r1, r1, #0x20 ; Timer1
  159 00000174 E5801010        STR              r1, [r0, #0x10]
  160 00000178         
  161 00000178         ; External Interrupt 1 setup for edge sensitive
  162 00000178 E59F0620        LDR              r0, =0xE01FC148
  163 0000017C E5901000        LDR              r1, [r0]
  164 00000180 E3811002        ORR              r1, r1, #2  ; EINT1 = Edge Sens
                                                            itive
  165 00000184 E5801000        STR              r1, [r0]
  166 00000188         
  167 00000188         ; Setting UART0 for interrupt on data received
  168 00000188 E59F0614        LDR              r0, =0xE000C004
  169 0000018C E5901000        LDR              r1, [r0]
  170 00000190 E3811001        ORR              r1, r1, #1  ; Enable RDA
  171 00000194 E5801000        STR              r1, [r0]
  172 00000198         
  173 00000198         ;Enable Timer0 to Interrupt (Match Control Register)
  174 00000198 E59F0608        LDR              r0, =0xE0004014
  175 0000019C E5901000        LDR              r1, [r0]
  176 000001A0 E3811018        ORR              r1, r1, #0x18 ;Generate Interru
                                                            pt(bit3),Reset TC(b
                                                            it4), Stop TC(bit5)
                                                             for MR1
  177 000001A4 E3C11020        BIC              r1, r1, #0x20
  178 000001A8 E5801000        STR              r1, [r0]
  179 000001AC         
  180 000001AC         ;Enable Timer1 to Interrupt (Match Control Register)
  181 000001AC E59F05F8        LDR              r0, =0xE0008014
  182 000001B0 E5901000        LDR              r1, [r0]
  183 000001B4 E38110C8        ORR              r1, r1, #0x00C8 ;(Generate Inte
                                                            rrupt(bit3),Reset T
                                                            C(bit4), Stop TC(bi
                                                            t5))MR1,(Generate I
                                                            nterrupt(bit6),Rese
                                                            t TC(bit7), Stop TC
                                                            (bit8))MR2
  184 000001B8 E3C11E13        BIC              r1, r1, #0x0130
  185 000001BC E5801000        STR              r1, [r0]
  186 000001C0         
  187 000001C0         ;Setup Match Register 1 for Timer0(MR1)
  188 000001C0 E59F05E8        LDR              r0, =0xE000401C
  189 000001C4 E59F15E8        LDR              r1, =0x008CA000 ;0.5sec
  190 000001C8 E5801000        STR              r1, [r0]
  191 000001CC         
  192 000001CC         ;Setup Match Register 1 for Timer1(MR1)
  193 000001CC E59F05E4        LDR              r0, =0xE000801C
  194 000001D0 E59F15E4        LDR              r1, =0x01194000 ;1sec
  195 000001D4 E5801000        STR              r1, [r0]
  196 000001D8         
  197 000001D8         ;Setup Match Register 2 for Timer1(MR1)
  198 000001D8 E59F05E0        LDR              r0, =0xE0008020
  199 000001DC E59F15E0        LDR              r1, =0x83D60000 ;120sec
  200 000001E0 E5801000        STR              r1, [r0]
  201 000001E4         
  202 000001E4         ; Enable FIQ's, Disable IRQ's
  203 000001E4 E10F0000        MRS              r0, CPSR



ARM Macro Assembler    Page 5 


  204 000001E8 E3C00040        BIC              r0, r0, #0x40
  205 000001EC E3800080        ORR              r0, r0, #0x80
  206 000001F0 E121F000        MSR              CPSR_c, r0
  207 000001F4         
  208 000001F4 E8BD4003        LDMFD            SP!, {r0-r1, lr} 
                                                            ; Restore registers
                                                            
  209 000001F8 E12FFF1E        BX               lr          ; Return
  210 000001FC         
  211 000001FC         
  212 000001FC         timer0_speedup
  213 000001FC E92D5FFF        STMFD            r13!, {r0-r12, r14}
  214 00000200         
  215 00000200         ;Setup Match Register 1 for Timer0(MR1)
  216 00000200 E59F05A8        LDR              r0, =0xE000401C
  217 00000204 E59F25BC        LDR              r2, =0x001C2000 ;0.1sec
  218 00000208 E5901000        LDR              r1, [r0]
  219 0000020C E1510002        CMP              r1, r2
  220 00000210 0A000001        BEQ              t0su
  221 00000214 E0411002        SUB              r1, r1, r2
  222 00000218 E5801000        STR              r1, [r0]
  223 0000021C         t0su
  224 0000021C         ;Reset Timer0
  225 0000021C E59F05A8        LDR              r0, =0xE0004004
  226 00000220 E5901000        LDR              r1, [r0]
  227 00000224 E3811002        ORR              r1, r1, #0x02
  228 00000228 E5801000        STR              r1, [r0]
  229 0000022C E3C11002        BIC              r1, r1, #0x02
  230 00000230 E3811001        ORR              r1, r1, #0x01
  231 00000234 E5801000        STR              r1, [r0]
  232 00000238         
  233 00000238 E8BD5FFF        LDMFD            r13!, {r0-r12, r14}
  234 0000023C E12FFF1E        BX               lr
  235 00000240         
  236 00000240         timer1_start
  237 00000240 E92D5FFC        STMFD            r13!, {r2-r12, r14}
  238 00000244         
  239 00000244         ;Enable Timer1
  240 00000244 E59F0584        LDR              r0, =0xE0008004
  241 00000248 E5901000        LDR              r1, [r0]
  242 0000024C E3811003        ORR              r1, r1, #0x03
  243 00000250 E5801000        STR              r1, [r0]
  244 00000254 E3C11002        BIC              r1, r1, #0x02
  245 00000258 E3811001        ORR              r1, r1, #0x01
  246 0000025C E5801000        STR              r1, [r0]
  247 00000260         
  248 00000260 E8BD5FFC        LDMFD            r13!, {r2-r12, r14}
  249 00000264 E12FFF1E        BX               lr
  250 00000268         
  251 00000268         timers_start
  252 00000268 E92D5FFC        STMFD            r13!, {r2-r12, r14}
  253 0000026C         
  254 0000026C         ;Enable Timer0
  255 0000026C E59F0558        LDR              r0, =0xE0004004
  256 00000270 E5901000        LDR              r1, [r0]
  257 00000274 E3811002        ORR              r1, r1, #0x02
  258 00000278 E5801000        STR              r1, [r0]
  259 0000027C E3C11002        BIC              r1, r1, #0x02
  260 00000280 E3811001        ORR              r1, r1, #0x01



ARM Macro Assembler    Page 6 


  261 00000284 E5801000        STR              r1, [r0]
  262 00000288         
  263 00000288         ;Enable Timer1
  264 00000288 E59F0540        LDR              r0, =0xE0008004
  265 0000028C E5901000        LDR              r1, [r0]
  266 00000290 E3811002        ORR              r1, r1, #0x02
  267 00000294 E5801000        STR              r1, [r0]
  268 00000298 E3C11002        BIC              r1, r1, #0x02
  269 0000029C E3811001        ORR              r1, r1, #0x01
  270 000002A0 E5801000        STR              r1, [r0]
  271 000002A4         
  272 000002A4 E8BD5FFC        LDMFD            r13!, {r2-r12, r14}
  273 000002A8 E12FFF1E        BX               lr
  274 000002AC         
  275 000002AC         timers_restart
  276 000002AC E92D5FFC        STMFD            r13!, {r2-r12, r14}
  277 000002B0         
  278 000002B0         ;Enable Timer0
  279 000002B0 E59F0514        LDR              r0, =0xE0004004
  280 000002B4 E5901000        LDR              r1, [r0]
  281 000002B8 E3C11002        BIC              r1, r1, #0x02
  282 000002BC E3811001        ORR              r1, r1, #0x01
  283 000002C0 E5801000        STR              r1, [r0]
  284 000002C4         
  285 000002C4         ;Enable Timer1
  286 000002C4 E59F0504        LDR              r0, =0xE0008004
  287 000002C8 E5901000        LDR              r1, [r0]
  288 000002CC E3C11002        BIC              r1, r1, #0x02
  289 000002D0 E3811001        ORR              r1, r1, #0x01
  290 000002D4 E5801000        STR              r1, [r0]
  291 000002D8         
  292 000002D8 E8BD5FFC        LDMFD            r13!, {r2-r12, r14}
  293 000002DC E12FFF1E        BX               lr
  294 000002E0         
  295 000002E0         timer1_stop
  296 000002E0 E92D5FFC        STMFD            r13!, {r2-r12, r14}
  297 000002E4         ;Reset Timer1
  298 000002E4 E59F04E4        LDR              r0, =0xE0008004
  299 000002E8 E5901000        LDR              r1, [r0]
  300 000002EC E3811002        ORR              r1, r1, #0x02
  301 000002F0 E5801000        STR              r1, [r0]
  302 000002F4         
  303 000002F4         ;Disable Timer1
  304 000002F4 E59F04D4        LDR              r0, =0xE0008004
  305 000002F8 E5901000        LDR              r1, [r0]
  306 000002FC E3C11003        BIC              r1, r1, #0x03
  307 00000300 E5801000        STR              r1, [r0]
  308 00000304         
  309 00000304         ;Setup Match Register 1 for Timer1(MR1)
  310 00000304 E59F04AC        LDR              r0, =0xE000801C
  311 00000308 E59F14AC        LDR              r1, =0x01194000 ;1sec
  312 0000030C E5801000        STR              r1, [r0]
  313 00000310         
  314 00000310 E8BD5FFC        LDMFD            r13!, {r2-r12, r14}
  315 00000314 E12FFF1E        BX               lr
  316 00000318         
  317 00000318         timers_stop
  318 00000318 E92D5FFC        STMFD            r13!, {r2-r12, r14}
  319 0000031C         



ARM Macro Assembler    Page 7 


  320 0000031C         ;Reset Timer0
  321 0000031C E59F04A8        LDR              r0, =0xE0004004
  322 00000320 E5901000        LDR              r1, [r0]
  323 00000324 E3811002        ORR              r1, r1, #0x02
  324 00000328 E5801000        STR              r1, [r0]
  325 0000032C         
  326 0000032C         ;Reset Timer1
  327 0000032C E59F049C        LDR              r0, =0xE0008004
  328 00000330 E5901000        LDR              r1, [r0]
  329 00000334 E3811002        ORR              r1, r1, #0x02
  330 00000338 E5801000        STR              r1, [r0]
  331 0000033C         
  332 0000033C         ;Disable Timer0
  333 0000033C E59F0488        LDR              r0, =0xE0004004
  334 00000340 E5901000        LDR              r1, [r0]
  335 00000344 E3C11003        BIC              r1, r1, #0x03
  336 00000348 E5801000        STR              r1, [r0]
  337 0000034C         
  338 0000034C         ;Disable Timer1
  339 0000034C E59F047C        LDR              r0, =0xE0008004
  340 00000350 E5901000        LDR              r1, [r0]
  341 00000354 E3C11003        BIC              r1, r1, #0x03
  342 00000358 E5801000        STR              r1, [r0]
  343 0000035C         
  344 0000035C E8BD5FFC        LDMFD            r13!, {r2-r12, r14}
  345 00000360 E12FFF1E        BX               lr
  346 00000364         
  347 00000364         timers_pause
  348 00000364 E92D5FFC        STMFD            r13!, {r2-r12, r14}
  349 00000368         
  350 00000368         ;Enable Timer0
  351 00000368 E59F045C        LDR              r0, =0xE0004004
  352 0000036C E5901000        LDR              r1, [r0]
  353 00000370 E3C11001        BIC              r1, r1, #0x01
  354 00000374 E5801000        STR              r1, [r0]
  355 00000378         
  356 00000378         ;Enable Timer1
  357 00000378 E59F0450        LDR              r0, =0xE0008004
  358 0000037C E5901000        LDR              r1, [r0]
  359 00000380 E3C11001        BIC              r1, r1, #0x01
  360 00000384 E5801000        STR              r1, [r0]
  361 00000388         
  362 00000388 E8BD5FFC        LDMFD            r13!, {r2-r12, r14}
  363 0000038C E12FFF1E        BX               lr
  364 00000390         
  365 00000390         read_character
  366 00000390 E92D5FFC        STMFD            r13!, {r2-r12, r14}
  367 00000394         RC
  368 00000394 E59F13FC        LDR              r1, = 0xE000C000
  369 00000398 E5D12014        LDRB             r2, [r1, #U0LSR] ;Get to LSR ad
                                                            dress from r1
  370 0000039C E2022001        AND              r2, r2, #0x1 ;Get only 1st bit(
                                                            RDR)
  371 000003A0 E3520000        CMP              r2, #0
  372 000003A4 0AFFFFFA        BEQ              RC          ;branch if zero
  373 000003A8 E1800000        ORR              r0, r0, r0
  374 000003AC E5D10000        LDRB             r0, [r1]    ;Get byte from UART
                                                             into r0
  375 000003B0         



ARM Macro Assembler    Page 8 


  376 000003B0 E8BD5FFC        LDMFD            r13!, {r2-r12, r14}
  377 000003B4 E12FFF1E        BX               lr
  378 000003B8         
  379 000003B8         output_character
  380 000003B8 E92D5FFC        STMFD            r13!, {r2-r12, r14}
  381 000003BC         OC
  382 000003BC E59F13D4        LDR              r1, =0xE000C000
  383 000003C0 E5D12014        LDRB             r2, [r1, #U0LSR] ;Get to LSR ad
                                                            dress from r1 
  384 000003C4 E2022020        AND              r2, r2, #0x20 ;Get only the 5th
                                                             bit(THRE)
  385 000003C8 E3520000        CMP              r2, #0      ;branch if zero
  386 000003CC 0AFFFFFA        BEQ              OC
  387 000003D0 E1800000        ORR              r0, r0, r0
  388 000003D4 E5C10000        STRB             r0, [r1]    ;store byte from r0
                                                             into UART
  389 000003D8         
  390 000003D8 E8BD5FFC        LDMFD            r13!, {r2-r12, r14}
  391 000003DC E12FFF1E        BX               lr
  392 000003E0         
  393 000003E0         read_string
  394 000003E0 E92D5FFC        STMFD            r13!, {r2-r12, r14}
  395 000003E4         RS
  396 000003E4 EBFFFFFE        BL               read_character
  397 000003E8 EBFFFFFE        BL               output_character
  398 000003EC E350000D        CMP              r0, #0xD    ;check if it is ent
                                                            er key
  399 000003F0 0A000004        BEQ              ES          ;branch exit
  400 000003F4 E5C40000        STRB             r0, [r4]    ;store byte into ad
                                                            dress in r4
  401 000003F8 E2844001        ADD              r4, r4, #1  ;set pointer to nex
                                                            t byte
  402 000003FC E5D43000        LDRB             r3, [r4]
  403 00000400 E3530000        CMP              r3, #0x0    ;using r3 to check 
                                                            if next byte is a n
                                                            ull character
  404 00000404 1AFFFFF6        BNE              RS
  405 00000408         
  406 00000408         ES
  407 00000408 E1800000        ORR              r0, r0, r0
  408 0000040C         
  409 0000040C E8BD5FFC        LDMFD            r13!, {r2-r12, r14}
  410 00000410 E12FFF1E        BX               lr
  411 00000414         
  412 00000414         output_string
  413 00000414 E92D5FFC        STMFD            r13!, {r2-r12, r14}
  414 00000418 E5D40000        LDRB             r0, [r4]
  415 0000041C         OS
  416 0000041C EBFFFFFE        BL               output_character
  417 00000420 E2844001        ADD              r4, r4, #1  ;}
  418 00000424 E5D40000        LDRB             r0, [r4]    ;}iterate through t
                                                            he address till it 
                                                            reach a null charac
                                                            ter 
  419 00000428 E3500000        CMP              r0, #0x0    ;}
  420 0000042C 1AFFFFFA        BNE              OS          ;}
  421 00000430         
  422 00000430 E8BD5FFC        LDMFD            r13!, {r2-r12, r14}
  423 00000434 E12FFF1E        BX               lr



ARM Macro Assembler    Page 9 


  424 00000438         
  425 00000438         div_and_mod
  426 00000438 E92D5FFC        STMFD            r13!, {r2-r12, r14}
  427 0000043C         
  428 0000043C         ; Your code for the signed division/mod routine goes her
                       e.
  429 0000043C         ; The dividend is passed in r0 and the divisor in r1.
  430 0000043C         ; The quotient is returned in r0 and the remainder in r1
                       .
  431 0000043C         ; Code start here
  432 0000043C         
  433 0000043C E3A08000        MOV              r8, #0      ; Initialize r8 as 
                                                            Dividend/Divisor ne
                                                            gative flag
  434 00000440 E3500000        CMP              r0, #0      ; Compare Dividend 
                                                            to zero value
  435 00000444 CA000002        BGT              NDVS        ; Branch to NDVS(Ne
                                                            gative Divisor) if 
                                                            Dividend is greater
                                                             than zero, if not 
                                                            continue
  436 00000448 E2888001        ADD              r8, r8, #1  ; Increase the Divi
                                                            dend negative flag 
                                                            by 1
  437 0000044C E1E00000        MVN              r0, r0      ; Move 1's compleme
                                                            nt of r0 into r0
  438 00000450 E2800001        ADD              r0, r0, #1  ; Add value of 1 in
                                                            to r0 to make it a 
                                                            2's complement
  439 00000454         ; NDVS(Negative Divisor) start here
  440 00000454 E3510000 
                       NDVS    CMP              r1, #0      ; Compare Divisor t
                                                            o zero value
  441 00000458 CA000002        BGT              INTL        ; Branch to INTL(In
                                                            itial) if Divisor i
                                                            s greater than zero
                                                            , if not continue
  442 0000045C E2888001        ADD              r8, r8, #1  ; Increase the Divi
                                                            sor negative flag b
                                                            y 1
  443 00000460 E1E01001        MVN              r1, r1      ; Move 1's compleme
                                                            nt of r1 into r1
  444 00000464 E2811001        ADD              r1, r1, #1  ; Add value of 1 in
                                                            to r1 to make it a 
                                                            2's complement
  445 00000468         ; INTL(Initial division start here)
  446 00000468 E3A0700F 
                       INTL    MOV              r7, #0xF    ; Initialize r7 as 
                                                            Counter to 15
  447 0000046C E3A05000        MOV              r5, #0      ; Initialize r5 as 
                                                            Quotient to 0
  448 00000470 E1A01711        MOV              r1, r1, LSL r7 ; Logical Left S
                                                            hift Divisor in r1 
                                                            by 15 places
  449 00000474 E1A06000        MOV              r6, r0      ; Initialize r6 as 
                                                            Remainder Register 
                                                            to store Dividend v
                                                            alue
  450 00000478         ; CLOOP(Counter Loop) start here



ARM Macro Assembler    Page 10 


  451 00000478 E0466001 
                       CLOOP   SUB              r6, r6, r1  ; Remainder subtrac
                                                            ted by Divisor stor
                                                            e into r6(remainder
                                                             register)
  452 0000047C E3560000        CMP              r6, #0      ; Compare Remainder
                                                             to zero value
  453 00000480 BA000009        BLT              RLOOP       ; Branch to RLOOP(R
                                                            emainder Loop) if r
                                                            emainder is less th
                                                            an zero, if not con
                                                            tinue
  454 00000484 E1A05085        MOV              r5, r5, LSL #1 ; Logical Left S
                                                            hift Quotient by 1
  455 00000488 E3855001        ORR              r5, r5, #1  ; Logical Bitwise O
                                                            R(ORR) value of 1 t
                                                            o make the LSB = 1
  456 0000048C         ; LOOPC(Loop Continuation) start here
  457 0000048C E1A010A1 
                       LOOPC   MOV              r1, r1, LSR #1 ; Logical Right 
                                                            Shift Divisor by 1 
                                                            place so that the M
                                                            SB = 0
  458 00000490 E3570000        CMP              r7, #0      ; Compare Counter t
                                                            o zero value
  459 00000494 CA000002        BGT              DCOUNT      ; Branch to DCOUNT(
                                                            Decrement Counter) 
                                                            if Counter is great
                                                            er than zero, if no
                                                            t continue
  460 00000498 E3580001        CMP              r8, #1      ; Compare negative 
                                                            flag to value of 1
  461 0000049C 0A000005        BEQ              NQUO        ; Branch to NQUO(Ne
                                                            gative Quotient) if
                                                             negative flag equa
                                                            l to one, if not co
                                                            ntinue
  462 000004A0 EA000006        B                FINAL       ; Branch to FINAL
  463 000004A4         ; DCOUNT(Decrement Counter) start here
  464 000004A4 E2477001 
                       DCOUNT  SUB              r7, r7, #1  ; Subtract Counter 
                                                            by 1 value
  465 000004A8 EAFFFFF2        B                CLOOP       ; Branch to CLOOP(C
                                                            ounter Loop)
  466 000004AC         ; RLOOP(Remainder Loop) start here
  467 000004AC E0866001 
                       RLOOP   ADD              r6, r6, r1  ; Add Divisor Back 
                                                            to Remainder and st
                                                            ore into r6(remaind
                                                            er register)
  468 000004B0 E1A05085        MOV              r5, r5, LSL #1 ; Logical Left S
                                                            hift Quotient by 1 
                                                            to make LSB = 0
  469 000004B4 EAFFFFF4        B                LOOPC       ; Branch to LOOPC(L
                                                            oop Continuation)
  470 000004B8         ; NQUO(Negative Quotient) start here
  471 000004B8 E1E05005 
                       NQUO    MVN              r5, r5      ; Move 1's compleme
                                                            nt of r5 into r5



ARM Macro Assembler    Page 11 


  472 000004BC E2855001        ADD              r5, r5, #1  ; Add value of 1 in
                                                            to r5 to make it a 
                                                            2's complement 
  473 000004C0         ; Final part(moving answer to r0 and r1) start here
  474 000004C0 E1A00005 
                       FINAL   MOV              r0, r5      ; Move value in r5(
                                                            Quotient Register) 
                                                            to r0 
  475 000004C4 E1A01006        MOV              r1, r6      ; Move value in r6(
                                                            Remainder Register)
                                                             to r1
  476 000004C8 EAFFFFFF        B                STOP        ; Branch to STOP
  477 000004CC         ; STOP here
  478 000004CC         STOP
  479 000004CC         
  480 000004CC E8BD5FFC        LDMFD            r13!, {r2-r12, r14}
  481 000004D0 E12FFF1E        BX               lr
  482 000004D4         
  483 000004D4         string_conversion
  484 000004D4 E92D5FFC        STMFD            r13!, {r2-r12, r14}
  485 000004D8 E3A0C000        MOV              r12, #0     ;set negative flag 
                                                            to 0
  486 000004DC E3A0B00A        MOV              r11, #10    ;set decimal counte
                                                            r to 0
  487 000004E0 E3A00000        MOV              r0, #0      ;clear r0
  488 000004E4 E5D43000        LDRB             r3, [r4]    ;}
  489 000004E8 E353002D        CMP              r3, #45     ;}check if 1st byte
                                                             is negative,if not
                                                             branch SCL
  490 000004EC 1A000001        BNE              SCL         ;}
  491 000004F0 E3A0C001        MOV              r12, #1     ;set n flag to 1
  492 000004F4 E2844001        ADD              r4, r4, #1
  493 000004F8         SCL
  494 000004F8 E5D43000        LDRB             r3, [r4]    ;}
  495 000004FC E3530030        CMP              r3, #48     ;}
  496 00000500 BA000007        BLT              SCN         ;}check if byte is 
                                                            numbers
  497 00000504 E3530039        CMP              r3, #57     ;}
  498 00000508 CA000005        BGT              SCN         ;}
  499 0000050C E00A0B90        MUL              r10, r0, r11 ;multiple value wi
                                                            th correct base
  500 00000510 E1A0000A        MOV              r0, r10
  501 00000514 E2433030        SUB              r3, r3, #48 ;converting asciiz 
                                                            to decimal
  502 00000518 E0800003        ADD              r0, r0, r3  ;store value into r
                                                            0
  503 0000051C E2844001        ADD              r4, r4, #1
  504 00000520 EAFFFFF4        B                SCL
  505 00000524         SCN
  506 00000524 E35C0000        CMP              r12, #0     ;}
  507 00000528 0A000001        BEQ              SCE         ;}checking n flag, 
                                                            and set if required
                                                            
  508 0000052C E1E00000        MVN              r0, r0      ;}
  509 00000530 E2800001        ADD              r0, r0, #1  ;}
  510 00000534         SCE
  511 00000534         
  512 00000534 E8BD5FFC        LDMFD            r13!, {r2-r12, r14}
  513 00000538 E12FFF1E        BX               lr



ARM Macro Assembler    Page 12 


  514 0000053C         
  515 0000053C         display_digit_on_7_seg
  516 0000053C E92D5FFC        STMFD            SP!,{r2-r12, lr}
  517 00000540 E59F128C        LDR              r1, =0xE0028000 ;load base addr
                                                            ess of IO0PIN
  518 00000544 E3E02000        LDR              r2, =0xFFFFFFFF ;load a word fu
                                                            ll of 1 bits
  519 00000548 E581200C        STR              r2, [r1, #12] 
                                                            ;address of IO0CLR
  520 0000054C E59F3284        LDR              r3, =digits_SET ;load address o
                                                            f digit set
  521 00000550 E1A00100        MOV              r0, r0, LSL #2 ;}
  522 00000554 E7932000        LDR              r2, [r3, r0] ;}To jump to the a
                                                            ddress of word in m
                                                            emory base on the v
                                                            alue and set IO0SET
                                                            .
  523 00000558 E5812004        STR              r2, [r1, #4] ;}
  524 0000055C E8BD5FFC        LDMFD            sp!,{r2-r12, lr} ;}
  525 00000560 E12FFF1E        BX               lr
  526 00000564         
  527 00000564         read_from_push_btns
  528 00000564 E92D5FFC        STMFD            SP!,{r2-r12, lr}
  529 00000568 E59FC26C        LDR              r12, =0xE0028014 ;base address 
                                                            of IO1SET 
  530 0000056C E59FB26C        LDR              r11, =0xE0028010 ;base address 
                                                            of IO1PIN
  531 00000570 E59CA000        LDR              r10, [r12]  ;}
  532 00000574 E38AA80F        ORR              r10, r10, #0x000F0000 ;}setup f
                                                            or IO1SET to clear 
                                                            turn off LED
  533 00000578 E58CA000        STR              r10, [r12]  ;}
  534 0000057C E59B9000        LDR              r9, [r11]   ;}
  535 00000580 E1A08009        MOV              r8, r9      ;}Set up r7-r9 to c
                                                            ompare changes in I
                                                            O1PIN
  536 00000584 E1A07009        MOV              r7, r9      ;}
  537 00000588         rfpbl
  538 00000588 E59F2208        LDR              r2, = 0xE000C000
  539 0000058C E5D23014        LDRB             r3, [r2, #U0LSR] ;Get to LSR ad
                                                            dress from r1
  540 00000590 E2033001        AND              r3, r3, #0x1 ;Get only 1st bit(
                                                            RDR)
  541 00000594         ;CMP r3, #0
  542 00000594 E5D24000        LDRB             r4, [r2]
  543 00000598 E354000D        CMP              r4, #0xD    ;check if it is ent
                                                            er key
  544 0000059C 0A000009        BEQ              rfpbq
  545 000005A0 E59B9000        LDR              r9, [r11]   ;}
  546 000005A4 E0088009        AND              r8, r8, r9  ;}check for changes
                                                             in IO1PIN
  547 000005A8 E1580007        CMP              r8, r7      ;}
  548 000005AC 0AFFFFF5        BEQ              rfpbl
  549 000005B0 E0077008        AND              r7, r7, r8  ;}
  550 000005B4 E1A00A27        MOV              r0, r7, LSR #20 ;}update r7 to 
                                                            changes and load it
                                                             into r0 as a rever
                                                            se binary next step
                                                            



ARM Macro Assembler    Page 13 


  551 000005B8 E1E00000        MVN              r0, r0      ;}
  552 000005BC EBFFFFFE        BL               reverse_four_bits
  553 000005C0 EBFFFFFE        BL               illuminateLEDs
  554 000005C4 EAFFFFEF        B                rfpbl
  555 000005C8         rfpbq
  556 000005C8 EBFFFFFE        BL               reverse_four_bits ;}
  557 000005CC EB000029        BL               binary_conversion ;}changing va
                                                            lue in r6 to a bina
                                                            ry value to display
                                                             in putty
  558 000005D0 E8BD5FFC        LDMFD            sp!, {r2-r12, lr}
  559 000005D4 E12FFF1E        BX               lr
  560 000005D8         
  561 000005D8         illuminateLEDs
  562 000005D8 E92D5FFF        STMFD            r13!, {r0-r12, r14}
  563 000005DC E59FC200        LDR              r12, =0xE002801C ;base address 
                                                            of IO1CLR
  564 000005E0 E59FB1F4        LDR              r11, =0xE0028014 ;base address 
                                                            of IO1SET
  565 000005E4 E59BA000        LDR              r10, [r11]  ;}
  566 000005E8 E38AA80F        ORR              r10, r10, #0x000F0000 ;}prep LE
                                                            D and set them to o
                                                            ff
  567 000005EC E58BA000        STR              r10, [r11]  ;}
  568 000005F0 EBFFFFFE        BL               reverse_four_bits ;}
  569 000005F4 E1A02000        MOV              r2, r0      ;}prep binary value
                                                             to be set in IO1CL
                                                            R(turn on)
  570 000005F8 E202200F        BIC              r2, r2, #0xFFFFFFF0 ;}
  571 000005FC E1A0A802        MOV              r10, r2, LSL #16 ;set value at 
                                                            right bits position
                                                            
  572 00000600 E58CA000        STR              r10, [r12]  ;set led
  573 00000604 E8BD5FFF        LDMFD            r13!, {r0-r12, r14}
  574 00000608 E12FFF1E        BX               lr
  575 0000060C         
  576 0000060C         Illuminate_RGB_LED
  577 0000060C E92D5FFF        STMFD            r13!, {r0-r12, r14}
  578 00000610 E59FC1D0        LDR              r12, =0xE0028004 ;base address 
                                                            of IO0SET
  579 00000614 E3A02826        LDR              r2, =0x00260000 ;bits set to se
                                                            t PORT
  580 00000618 E58C2000        STR              r2, [r12]
  581 0000061C E59FB1C8        LDR              r11, =0xE002800C ;base address 
                                                            of IO0CLR
  582 00000620 E59F31C8        LDR              r3, =colors_SET ;base address o
                                                            f colors set
  583 00000624 E1A00100        MOV              r0, r0, LSL #2 ;}
  584 00000628 E7932000        LDR              r2, [r3, r0] ;}set word in memo
                                                            ry to set colors of
                                                             RGB LED
  585 0000062C E58B2000        STR              r2, [r11]   ;}
  586 00000630 E8BD5FFF        LDMFD            r13!, {r0-r12, r14}
  587 00000634 E12FFF1E        BX               lr
  588 00000638         
  589 00000638         reverse_four_bits
  590 00000638 E92D5FFC        STMFD            SP!,{r2-r12, lr}
  591 0000063C E3A0C003        MOV              r12, #3     ;initialize counter
                                                             to 3



ARM Macro Assembler    Page 14 


  592 00000640 E3A03000        MOV              r3, #0      ;init r3 to 0(rever
                                                            se word register)
  593 00000644 E3A02000        MOV              r2, #0      ;init r2 to 0(lsb h
                                                            older)
  594 00000648         rfbl
  595 00000648 E2002001        AND              r2, r0, #1  ;get LSB
  596 0000064C E0833002        ADD              r3, r3, r2  ;concatenate revers
                                                            e word bits 
  597 00000650 E1A03083        MOV              r3, r3, LSL #1 ;}adjust both wo
                                                            rd by the bits move
                                                            d
  598 00000654 E1A000A0        MOV              r0, r0, LSR #1 ;}
  599 00000658 E24CC001        SUB              r12, r12, #1 ;}
  600 0000065C E35C0000        CMP              r12, #0     ;}check counter
  601 00000660 1AFFFFF8        BNE              rfbl
  602 00000664 E2002001        AND              r2, r0, #1  ;}
  603 00000668 E0833002        ADD              r3, r3, r2  ;}move the last bit
                                                            s into the reverse 
                                                            word register and s
                                                            tore into r0
  604 0000066C E1A00003        MOV              r0, r3      ;}
  605 00000670 E8BD5FFC        LDMFD            sp!, {r2-r12, lr}
  606 00000674 E12FFF1E        BX               lr
  607 00000678         
  608 00000678         binary_conversion
  609 00000678 E92D5FFC        STMFD            SP!,{r2-r12, lr}
  610 0000067C E1A02000        MOV              r2, r0
  611 00000680 E3A0100A        MOV              r1, #10
  612 00000684 EBFFFFFE        BL               div_and_mod ;check if there is 
                                                            a number exist in 1
                                                            0's
  613 00000688 E1A02001        MOV              r2, r1
  614 0000068C E2800030        ADD              r0, r0, #48
  615 00000690 E350002F        CMP              r0, #47
  616 00000694 CBFFFFFE        BLGT             output_character ;print out 1's
                                                            
  617 00000698 E1A00002        MOV              r0, r2
  618 0000069C E2800030        ADD              r0, r0, #48
  619 000006A0 EBFFFFFE        BL               output_character
  620 000006A4         bc_done
  621 000006A4 E8BD5FFC        LDMFD            sp!, {r2-r12, lr}
  622 000006A8 E12FFF1E        BX               lr
  623 000006AC         
  624 000006AC         binary_conversion_time
  625 000006AC E92D5FFC        STMFD            SP!,{r2-r12, lr}
  626 000006B0 E1A02000        MOV              r2, r0
  627 000006B4 E3A01064        MOV              r1, #100
  628 000006B8 EBFFFFFE        BL               div_and_mod ;check if there is 
                                                            a number exist in 1
                                                            0's
  629 000006BC E1A02001        MOV              r2, r1
  630 000006C0 E2800030        ADD              r0, r0, #48
  631 000006C4 E350002F        CMP              r0, #47
  632 000006C8 CBFFFFFE        BLGT             output_character 
                                                            ;print out 100's
  633 000006CC E1A00002        MOV              r0, r2
  634 000006D0 E3A0100A        MOV              r1, #10
  635 000006D4 EBFFFFFE        BL               div_and_mod ;check if there is 
                                                            a number exist in 1



ARM Macro Assembler    Page 15 


                                                            0's
  636 000006D8 E1A02001        MOV              r2, r1
  637 000006DC E2800030        ADD              r0, r0, #48
  638 000006E0 E350002F        CMP              r0, #47
  639 000006E4 CBFFFFFE        BLGT             output_character 
                                                            ;print out 10's
  640 000006E8 E1A00002        MOV              r0, r2
  641 000006EC E2800030        ADD              r0, r0, #48
  642 000006F0 EBFFFFFE        BL               output_character
  643 000006F4         bct_done
  644 000006F4 E8BD5FFC        LDMFD            sp!, {r2-r12, lr}
  645 000006F8 E12FFF1E        BX               lr
  646 000006FC         
  647 000006FC         binary_conversion_score
  648 000006FC E92D5FFC        STMFD            SP!,{r2-r12, lr}
  649 00000700 E1A02000        MOV              r2, r0
  650 00000704 E59F10E8        LDR              r1, =0x2710
  651 00000708 EBFFFFFE        BL               div_and_mod ;check if there is 
                                                            a number exist in 1
                                                            0's
  652 0000070C E1A02001        MOV              r2, r1
  653 00000710 E2800030        ADD              r0, r0, #48
  654 00000714 E350002F        CMP              r0, #47
  655 00000718 CBFFFFFE        BLGT             output_character 
                                                            ;print out 100's
  656 0000071C E1A00002        MOV              r0, r2
  657 00000720 E3A01FFA        MOV              r1, #1000
  658 00000724 EBFFFFFE        BL               div_and_mod ;check if there is 
                                                            a number exist in 1
                                                            0's
  659 00000728 E1A02001        MOV              r2, r1
  660 0000072C E2800030        ADD              r0, r0, #48
  661 00000730 E350002F        CMP              r0, #47
  662 00000734 CBFFFFFE        BLGT             output_character 
                                                            ;print out 100's
  663 00000738 E1A00002        MOV              r0, r2
  664 0000073C E3A01064        MOV              r1, #100
  665 00000740 EBFFFFFE        BL               div_and_mod ;check if there is 
                                                            a number exist in 1
                                                            0's
  666 00000744 E1A02001        MOV              r2, r1
  667 00000748 E2800030        ADD              r0, r0, #48
  668 0000074C E350002F        CMP              r0, #47
  669 00000750 CBFFFFFE        BLGT             output_character 
                                                            ;print out 100's
  670 00000754 E1A00002        MOV              r0, r2
  671 00000758 E3A0100A        MOV              r1, #10
  672 0000075C EBFFFFFE        BL               div_and_mod ;check if there is 
                                                            a number exist in 1
                                                            0's
  673 00000760 E1A02001        MOV              r2, r1
  674 00000764 E2800030        ADD              r0, r0, #48
  675 00000768 E350002F        CMP              r0, #47
  676 0000076C CBFFFFFE        BLGT             output_character 
                                                            ;print out 10's
  677 00000770 E1A00002        MOV              r0, r2
  678 00000774 E2800030        ADD              r0, r0, #48
  679 00000778 EBFFFFFE        BL               output_character
  680 0000077C         bcs_done



ARM Macro Assembler    Page 16 


  681 0000077C E8BD5FFC        LDMFD            sp!, {r2-r12, lr}
  682 00000780 E12FFF1E        BX               lr
  683 00000784         
  684 00000784                 END
              E002C000 
              E0028008 
              00263F80 
              FFD9C07F 
              E0028018 
              E000C000 
              FFFFF000 
              E01FC148 
              E000C004 
              E0004014 
              E0008014 
              E000401C 
              008CA000 
              E000801C 
              01194000 
              E0008020 
              83D60000 
              001C2000 
              E0004004 
              E0008004 
              E0028000 
              00000000 
              E0028014 
              E0028010 
              E002801C 
              E0028004 
              E002800C 
              00000000 
              00002710 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\library.d -o.\objects\library.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\A
RM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --pre
define="__UVISION_VERSION SETA 522" --list=.\listings\library.lst library.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CLOOP 00000478

Symbol: CLOOP
   Definitions
      At line 451 in file library.s
   Uses
      At line 465 in file library.s
Comment: CLOOP used once
DCOUNT 000004A4

Symbol: DCOUNT
   Definitions
      At line 464 in file library.s
   Uses
      At line 459 in file library.s
Comment: DCOUNT used once
ES 00000408

Symbol: ES
   Definitions
      At line 406 in file library.s
   Uses
      At line 399 in file library.s
Comment: ES used once
FINAL 000004C0

Symbol: FINAL
   Definitions
      At line 474 in file library.s
   Uses
      At line 462 in file library.s
Comment: FINAL used once
INTL 00000468

Symbol: INTL
   Definitions
      At line 446 in file library.s
   Uses
      At line 441 in file library.s
Comment: INTL used once
Illuminate_RGB_LED 0000060C

Symbol: Illuminate_RGB_LED
   Definitions
      At line 576 in file library.s
   Uses
      At line 13 in file library.s
Comment: Illuminate_RGB_LED used once
LOOPC 0000048C

Symbol: LOOPC
   Definitions
      At line 457 in file library.s
   Uses
      At line 469 in file library.s
Comment: LOOPC used once
NDVS 00000454

Symbol: NDVS



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 440 in file library.s
   Uses
      At line 435 in file library.s
Comment: NDVS used once
NQUO 000004B8

Symbol: NQUO
   Definitions
      At line 471 in file library.s
   Uses
      At line 461 in file library.s
Comment: NQUO used once
OC 000003BC

Symbol: OC
   Definitions
      At line 381 in file library.s
   Uses
      At line 386 in file library.s
Comment: OC used once
OS 0000041C

Symbol: OS
   Definitions
      At line 415 in file library.s
   Uses
      At line 420 in file library.s
Comment: OS used once
RC 00000394

Symbol: RC
   Definitions
      At line 367 in file library.s
   Uses
      At line 372 in file library.s
Comment: RC used once
RLOOP 000004AC

Symbol: RLOOP
   Definitions
      At line 467 in file library.s
   Uses
      At line 453 in file library.s
Comment: RLOOP used once
RS 000003E4

Symbol: RS
   Definitions
      At line 395 in file library.s
   Uses
      At line 404 in file library.s
Comment: RS used once
SCE 00000534

Symbol: SCE
   Definitions
      At line 510 in file library.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 507 in file library.s
Comment: SCE used once
SCL 000004F8

Symbol: SCL
   Definitions
      At line 493 in file library.s
   Uses
      At line 490 in file library.s
      At line 504 in file library.s

SCN 00000524

Symbol: SCN
   Definitions
      At line 505 in file library.s
   Uses
      At line 496 in file library.s
      At line 498 in file library.s

STOP 000004CC

Symbol: STOP
   Definitions
      At line 478 in file library.s
   Uses
      At line 476 in file library.s
Comment: STOP used once
bc_done 000006A4

Symbol: bc_done
   Definitions
      At line 620 in file library.s
   Uses
      None
Comment: bc_done unused
bcs_done 0000077C

Symbol: bcs_done
   Definitions
      At line 680 in file library.s
   Uses
      None
Comment: bcs_done unused
bct_done 000006F4

Symbol: bct_done
   Definitions
      At line 643 in file library.s
   Uses
      None
Comment: bct_done unused
binary_conversion 00000678

Symbol: binary_conversion
   Definitions
      At line 608 in file library.s
   Uses
      At line 557 in file library.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: binary_conversion used once
binary_conversion_score 000006FC

Symbol: binary_conversion_score
   Definitions
      At line 647 in file library.s
   Uses
      At line 22 in file library.s
Comment: binary_conversion_score used once
binary_conversion_time 000006AC

Symbol: binary_conversion_time
   Definitions
      At line 624 in file library.s
   Uses
      At line 21 in file library.s
Comment: binary_conversion_time used once
colors_SET 00000044

Symbol: colors_SET
   Definitions
      At line 56 in file library.s
   Uses
      At line 582 in file library.s
Comment: colors_SET used once
digits_SET 00000000

Symbol: digits_SET
   Definitions
      At line 35 in file library.s
   Uses
      At line 520 in file library.s
Comment: digits_SET used once
display_digit_on_7_seg 0000053C

Symbol: display_digit_on_7_seg
   Definitions
      At line 515 in file library.s
   Uses
      At line 12 in file library.s
Comment: display_digit_on_7_seg used once
div_and_mod 00000438

Symbol: div_and_mod
   Definitions
      At line 425 in file library.s
   Uses
      At line 15 in file library.s
      At line 612 in file library.s
      At line 628 in file library.s
      At line 635 in file library.s
      At line 651 in file library.s
      At line 658 in file library.s
      At line 665 in file library.s
      At line 672 in file library.s

gpio_direction_register 00000080

Symbol: gpio_direction_register



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 78 in file library.s
   Uses
      At line 9 in file library.s
Comment: gpio_direction_register used once
illuminateLEDs 000005D8

Symbol: illuminateLEDs
   Definitions
      At line 561 in file library.s
   Uses
      At line 10 in file library.s
      At line 553 in file library.s

interrupt_init 00000128

Symbol: interrupt_init
   Definitions
      At line 133 in file library.s
   Uses
      At line 16 in file library.s
Comment: interrupt_init used once
lib 00000000

Symbol: lib
   Definitions
      At line 1 in file library.s
   Uses
      None
Comment: lib unused
output_character 000003B8

Symbol: output_character
   Definitions
      At line 379 in file library.s
   Uses
      At line 5 in file library.s
      At line 397 in file library.s
      At line 416 in file library.s
      At line 616 in file library.s
      At line 619 in file library.s
      At line 632 in file library.s
      At line 639 in file library.s
      At line 642 in file library.s
      At line 655 in file library.s
      At line 662 in file library.s
      At line 669 in file library.s
      At line 676 in file library.s
      At line 679 in file library.s

output_string 00000414

Symbol: output_string
   Definitions
      At line 412 in file library.s
   Uses
      At line 7 in file library.s
Comment: output_string used once
pin_connect_block_setup 00000060



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols


Symbol: pin_connect_block_setup
   Definitions
      At line 68 in file library.s
   Uses
      At line 2 in file library.s
Comment: pin_connect_block_setup used once
read_character 00000390

Symbol: read_character
   Definitions
      At line 365 in file library.s
   Uses
      At line 4 in file library.s
      At line 396 in file library.s

read_from_push_btns 00000564

Symbol: read_from_push_btns
   Definitions
      At line 527 in file library.s
   Uses
      At line 11 in file library.s
Comment: read_from_push_btns used once
read_string 000003E0

Symbol: read_string
   Definitions
      At line 393 in file library.s
   Uses
      At line 6 in file library.s
Comment: read_string used once
reverse_four_bits 00000638

Symbol: reverse_four_bits
   Definitions
      At line 589 in file library.s
   Uses
      At line 8 in file library.s
      At line 552 in file library.s
      At line 556 in file library.s
      At line 568 in file library.s

rfbl 00000648

Symbol: rfbl
   Definitions
      At line 594 in file library.s
   Uses
      At line 601 in file library.s
Comment: rfbl used once
rfpbl 00000588

Symbol: rfpbl
   Definitions
      At line 537 in file library.s
   Uses
      At line 548 in file library.s
      At line 554 in file library.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols


rfpbq 000005C8

Symbol: rfpbq
   Definitions
      At line 555 in file library.s
   Uses
      At line 544 in file library.s
Comment: rfpbq used once
string_conversion 000004D4

Symbol: string_conversion
   Definitions
      At line 483 in file library.s
   Uses
      At line 14 in file library.s
Comment: string_conversion used once
t0su 0000021C

Symbol: t0su
   Definitions
      At line 223 in file library.s
   Uses
      At line 220 in file library.s
Comment: t0su used once
timer0_speedup 000001FC

Symbol: timer0_speedup
   Definitions
      At line 212 in file library.s
   Uses
      At line 27 in file library.s
Comment: timer0_speedup used once
timer1_start 00000240

Symbol: timer1_start
   Definitions
      At line 236 in file library.s
   Uses
      At line 25 in file library.s
Comment: timer1_start used once
timer1_stop 000002E0

Symbol: timer1_stop
   Definitions
      At line 295 in file library.s
   Uses
      At line 26 in file library.s
Comment: timer1_stop used once
timers_pause 00000364

Symbol: timers_pause
   Definitions
      At line 347 in file library.s
   Uses
      At line 20 in file library.s
Comment: timers_pause used once
timers_restart 000002AC




ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

Symbol: timers_restart
   Definitions
      At line 275 in file library.s
   Uses
      At line 18 in file library.s
Comment: timers_restart used once
timers_start 00000268

Symbol: timers_start
   Definitions
      At line 251 in file library.s
   Uses
      At line 17 in file library.s
Comment: timers_start used once
timers_stop 00000318

Symbol: timers_stop
   Definitions
      At line 317 in file library.s
   Uses
      At line 19 in file library.s
Comment: timers_stop used once
uart_init 000000BC

Symbol: uart_init
   Definitions
      At line 95 in file library.s
   Uses
      At line 3 in file library.s
Comment: uart_init used once
watchdog_init 000000E4

Symbol: watchdog_init
   Definitions
      At line 108 in file library.s
   Uses
      At line 23 in file library.s
Comment: watchdog_init used once
watchdog_start 00000108

Symbol: watchdog_start
   Definitions
      At line 121 in file library.s
   Uses
      At line 24 in file library.s
Comment: watchdog_start used once
54 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

U0LSR 00000014

Symbol: U0LSR
   Definitions
      At line 31 in file library.s
   Uses
      At line 369 in file library.s
      At line 383 in file library.s
      At line 539 in file library.s

1 symbol
389 symbols in table
